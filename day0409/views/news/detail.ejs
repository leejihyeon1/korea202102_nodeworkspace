<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="shortcut icon" href="data:image/x-icon;," type="image/x-icon">
<style>
body {font-family: Arial, Helvetica, sans-serif;}
* {box-sizing: border-box;}

input[type=text], textarea{
  width: 100%;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
  margin-top: 6px;
  margin-bottom: 16px;
  resize: vertical;
}
textarea{
  height: 100px;
}

input[type=button] {
  background-color: #4CAF50;
  color: white;
  padding: 12px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

input[type=button]:hover {
  background-color: #45a049;
}

.container {
  border-radius: 5px;
  background-color: #f2f2f2;
  padding: 20px;
}

.comment-list div{
  display: inline-block; /*block속성(크기 가능)을 유지하되, 공존할수있음*/
  border: 1px solid #ccc;
}
</style>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdn.ckeditor.com/4.16.0/standard/ckeditor.js"></script>
<script src="/js/Comments.js"></script>
<script>
/*jquery의 문법 형신 (누구를).어떻게, 누구를 자리에 올수있는 요소 => css의 selector*/

$(function(){//onLoad와 같은 뜻

  //편집기 입히기!
  CKEDITOR.replace( "content");

  $($("input[type='button']")[0]).click(function(){ //등록 버튼
   edit();
  });

  $($("input[type='button']")[1]).click(function(){ //목록 버튼
    getList();
  });

});
function edit(){
  $("form").attr("action","/news/edit");  //url은 개발자가 정한다, 단 서버랑 짝을 맞추자!
  $("form").attr("method","post");
  $("form").submit();//여기서 전송!!
}
function getList(){
  location.href="/news/list";
}
function addComment(){//댓글 등록 요청
  //화면의 일부만 변경하기 위해 (부분변경), 백그라운드에서 요청을 시도
  var xhttp=new XMLHttpRequest();//비동기 객체 생성

  //이벤트 처리
  xhttp.onreadystatechange=function(){
    if(this.readyState ==4 && this.status ==200){
      //서버에서 성공된 응답 데이터가 온 시점이다!
      // alert("서버로부터 받은 결과는"+this.responseText);

      //responseText를 분석하여, 성공, 실패 여부에 따라 알맞는 메세지 출력
      var json=JSON.parse(this.responseText); //쌍따옴표 걷어내고, json객체 반환
      // alert("분석결과는"+json.result);
      if(json.result==0){
        alert("댓글 등록 실패");
      }else{
        // 댓글 불러오기(가져오기=get, 등록하기=post)
        alert("댓글 등록 성공");
        // location.reload();
        // 비동기로 요청하자! 따라서, 디자인을 제외한 데이터만 서버로부터 가져오자!
        getCommentsLsit(); //동기가 아닌 비동기로 호출하는 함수를 이용하자!
      }
    }
  }
  xhttp.open("POST", "/comments/regist", true);
  xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
  var msg=$("input[name='msg']").val();//댓글 내용
  var author=$("input[name='author']").val();//댓글 작성자

  xhttp.send("news_id=<%=news[0]%>&msg="+msg+"&author="+author);

  // $("#comment-form").attr({
  //   method:"post",
  //   action:"/comments/regist"
  // });
  // $("#comment-form").submit();//전송
}

//댓글 목록을 비동기로 가녀오기!!(게시판 들어올 때 호출 + 코멘트 등록시 호출)
function getCommentsLsit(){
  // location.href="/comments/list?news_id=<%=news[0]%>";//동기방식
  var xhttp=new XMLHttpRequest(); 
  //메인 실행부는 아래의 이벤트 함수를 통해, 비동기방식의 요청이 완료된 시점을 알수있다
  xhttp.onreadystatechange=function(){
    //서버가 무사히 처리를 했고, 응답이 왔다면.. 두가지 조건을 만족하는 코드 작성
    if(this.readyState==4 && this.status==200){
      alert("서버로부터 받은 데이터는"+this.responseText);
      //서버가 json문자열로 전송했기 때문에, 다시 json으로 복원을 하여 사용해보자!
      var json=JSON.parse(this.responseText);//문자열-->json
      alert("코멘트 게시물 수는"+json.rows.length);

      //서버로부터 받은 데이터를 화면에 갱신시켜 보자, 이때 개발자는 DOM지식이 있어야
      //html을 동적으로 변경시킨다..
      printCommentsList(json.rows);
    }
  }
  xhttp.open("GET", "/comments/list?news_id=<%=news[0]%>",true);
  xhttp.send();
}

function printCommentsList(arr){ //댓글 출력
  //출력 전에, 기존에 등록된 댓글을 싹 지우자! 그후 다시 반복문 돌림
  $("#comments_wrapper").html("");  //innerHTML="" 동일
  console.log(arr);
  for(var i=0;i<arr.length;i++){ //게시물 수만큼 반복문 수행
    var msg=arr[i][2];//메시지
    var author=arr[i][3];//작성자
    var writeDay=arr[i][4].substring(0,10);//등록일
    var c = new Comments(document.getElementById("comments_wrapper"), msg, author, writeDay);
  }
}
</script>
</head>
<body>

<h3>Contact Form</h3>

<div class="container">
  <!-- 폼태그의 속성 중 action은 이 폼양식을 전송할 대상 서버의 url을 명시할 수 있다 -->
  <!--  
    id와 name의 공통점과 차이점
    공통점) 문서내의 요소를 식별하기 위함
    차이점) id- 유일해야함, name-중복허용(배열로 인식)
              name은 폼 전송시 전송 파라미터 역할을 한다, 즉 변수 역할을 한다!
              이때 전송 파라미터로서의 name의 이름은 주로 db의 테이블의 컬럼명과 일치시키는 규칙
  -->
    <form id="detail-form">
    <input type="text"  name="title" value="<%=news[1]%>">
    <input type="text"  name="writer" value="<%=news[2]%>">
    <textarea name="content"><%=news[3]%></textarea>

    <!-- input태그의 type중 submit은 디폴트로 전송기능이 포함되어 있기 때문에 
            클릭만으로도, 전송이 발생 
            따라서, 일반 버튼화 시켜놔서 무조건 전송할 수 없게 하자!-->
    <input type="button" value="등록"> 
    <input type="button" value="목록"> 
  </form>

  <form id="comment-form">
    <!-- 아래의 히든의 용도? 어떤 뉴스기사에 대한 댓글인지를 결정지음 -->
      <input type="hidden" name="news_id" value="<%=news[0]%>">
      <input type="text" name="msg" placeholder="댓글 내용" style="width: 70%;">
      <input type="text" name="author" placeholder="작성자" style="width: 15%;">
      <input type="button" value="댓글등록" placeholder="댓글 등록" style="width: 10%;" onclick="addComment()">
  </form>

  <div id="comments_wrapper">
  <%for(var i=0; i<commentsList.length; i++){%>
    <%var comments=commentsList[i]; //댓글 한건 꺼내기%>
  <div class="comment-list">
    <div style="width: 70%;"><%=comments[2]%></div>
    <%var d=new Date(comments[4])%>
    <div style="width: 15%;"><%=comments[4]%></div>
    <div  style="width: 10%;"><%=d.getFullYear()%>-<%=lib.getZeroString(d.getMonth()+1)%>-<%=d.getDate()%></div>
  </div>
<%}%>
</div>
</div>

</body>
</html>